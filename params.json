{"name":"Mashape-oauth","tagline":"OAuth Modules for Node.js - Supporting RSA, HMAC, PLAINTEXT, 2,3-Legged, 1.0a, Echo, XAuth, and 2.0","body":"# Mashape OAuth\r\n\r\nOAuth Modules for Node.js - Supporting RSA, HMAC, PLAINTEXT, 2,3-Legged, 1.0a, Echo, XAuth, and 2.0\r\n\r\n# Installation\r\n\r\n```\r\nnpm install mashape-oauth\r\n```\r\n\r\n# Usage\r\n\r\nRequire the library and the one you wish to use.\r\n\r\n1. [OAuth](#using-oauth-1x-xauth-echo)\r\n  1. [getOAuthRequestToken](#getoauthrequesttoken---creating-request-token-call)\r\n  2. [getOAuthAccessToken](#getoauthaccesstoken---creating-oauth-access-token-call)\r\n  2. [getXAuthAccessToken](#getxauthaccesstoken---creating-xauth-access-token-call)\r\n  3. [Request Methods](#request-methods)\r\n2. [OAuth2](#using-oauth2)\r\n\r\n***\r\n\r\n### Using OAuth (1.x, XAuth, Echo):\r\n\r\n```javascript\r\nvar OAuth = require('mashape-oauth').OAuth;\r\nvar oa = new OAuth({ /* … options … */ }, callback);\r\n```\r\n- `options` `Object` *OAuth request options*\r\n  - `echo` `Object` ___Optional___ *If it exists we treat the request as OAuth Echo request. See [Twitter](https://dev.twitter.com/docs/auth/oauth/oauth-echo)*\r\n      - `verifyCredentials` `String` *What is the credentials URI to delegate against?*\r\n  - `realm` `String` ___Optional___ *Access Authentication Framework Realm Value, Commonly used in Echo Requests, allowed in all however: [Section 3.5.1](http://tools.ietf.org/html/rfc5849#section-3.5.1)*\r\n  - `requestUrl` `String` *Request Token URL. [Section 6.1](http://oauth.net/core/1.0/#auth_step1)*\r\n  - `accessUrl` `String` *Access Token URL. [Section 6.2](http://oauth.net/core/1.0/#auth_step2)*\r\n  - `callback` `String` *URL the Service Provider will use to redirect User back to Consumer after obtaining User Authorization has been completed. [Section 6.2.1](http://oauth.net/core/1.0/#auth_step2)*\r\n  - `consumerKey` `String` *The Consumer Key*\r\n  - `consumerSecret` `String` *The Consumer Secret*\r\n  - `version` `String` ___Optional___ *By spec this is `1.0` by default. [Section 6.3.1](http://oauth.net/core/1.0/#auth_step3)*\r\n  - `signatureMethod` `String` *Type of signature to generate, must be one of:*\r\n      - PLAINTEXT\r\n      - RSA-SHA1\r\n      - HMAC-SHA1\r\n  - `nonceLength` `Number` ___Optional___ *Length of nonce string. Default `32`*\r\n  - `headers` `Object` ___Optional___ *Headers to be sent along with request, by default these are already set.*\r\n  - `clientOptions` `Object` ___Optional___ *Contains `requestTokenHttpMethod` and `accessTokenHttpMethod` value.*\r\n  - `parameterSeperator` `String` ___Optional___ *Seperator for OAuth header parameters. Default is `,`*\r\n\r\n#### getOAuthRequestToken() - Creating Request Token Call\r\n\r\n```javascript\r\noa.getOAuthRequestToken({ /* … parameters … */ }, callback);\r\n```\r\n\r\n- `parameters` `Object` ___Optional___ *Additional Headers you might want to pass along.*\r\n  - *If omitted, you can treat parameters argument as callback and pass along a function as a single parameter.*\r\n- `callback` `Function` *Anonymous Function to be invoked upon response or failure.*\r\n\r\n\r\n##### Example\r\n\r\n```javascript\r\noa.getOAuthRequestToken(function (error, oauth_token, oauth_token_secret, results) {\r\n  if (error)\r\n    return res.send('Error getting OAuth Request Token: ' + error, 500);\r\n  else\r\n    // Usually a redirect happens here to the /oauth/authorize stage\r\n    return res.send('Successfully Obtained Token & Secret: ' + oauth_token + ' & ' + oauth_token_secret, 200);\r\n});\r\n```\r\n\r\n#### getOAuthAccessToken() - Creating OAuth Access Token Call\r\n\r\n```javascript\r\noa.getOAuthAccessToken(options, callback);\r\n```\r\n\r\n- `options` `Object`\r\n  - `oauth_verifier` `String` *Verification code tied to the Request Token. [Section 2.3](http://tools.ietf.org/html/rfc5849#section-2.3)*\r\n  - `oauth_token` `String` *Request Token*\r\n  - `oauth_token_secret` `String` *Request Token Secret, used to help generation of signatures.*\r\n  - `parameters` `Object` ___Optional___ *Additional headers to be sent along with request.*\r\n  - `callback` `Function` ___Optional___ *Method to be invoked upon result, over-ridden by argument if set.*\r\n- `callback` `Function` *Anonymous Function to be invoked upon response or failure, setting this overrides previously set callback inside options object.*\r\n\r\n\r\n##### Example\r\n\r\n```javascript\r\noa.getOAuthAccessToken({\r\n  oauth_verifier: 'ssid39b',\r\n  oauth_token: 'request_key',\r\n  oauth_secret: 'request_secret'\r\n}, function (error, token, secret, result) {\r\n  if (error)\r\n    return res.send('Error getting XAuth Access Token: ' + error, 500);\r\n  else\r\n    // Usually you want to store the token and secret in a session and make your requests after this\r\n    return res.send('Successfully Obtained Token & Secret: ' + oauth_token + ' & ' + oauth_token_secret, 200);\r\n});\r\n```\r\n\r\n#### getXAuthAccessToken() - Creating XAuth Access Token Call\r\n\r\n```javascript\r\noa.getXAuthAccessToken(username, password, callback);\r\n```\r\n\r\n- username `{String}` XAuth Username credentials of User obtaining a token on behalf of\r\n- password `{String}` XAuth Password credentials of User obtaining a token on behalf of\r\n- callback `{Function}` Anonymous Function to be invoked upon response or failure.\r\n\r\n\r\n##### Example\r\n\r\n```javascript\r\noa.getXAuthAccessToken('nijikokun', 'abc123', function (error, oauth_token, oauth_token_secret, results) {\r\n  if (error)\r\n    return res.send('Error getting XAuth Access Token: ' + error, 500);\r\n  else\r\n    // Usually you want to store the token and secret in a session and make your requests after this\r\n    return res.send('Successfully Obtained Token & Secret: ' + oauth_token + ' & ' + oauth_token_secret, 200);\r\n});\r\n```\r\n\r\n#### Request Methods\r\n\r\n```javascript\r\noa.post(options, callback);\r\noa.get(options, callback);\r\noa.delete(options, callback);\r\noa.patch(options, callback);\r\noa.put(options, callback);\r\n\r\n// Alternatively, you can use the old node-oauth style: (Where method is one of five above.)\r\noa.method(url, oauth_token, oauth_token_secret, body, type, parameters, callback);\r\n```\r\n\r\n- options `{Object}` Contains Request Information\r\n  - url `{String}` URL to be requested upon\r\n  - oauth_token `{String}` *Optional;* Dependant upon request step, could be access, or request token.\r\n  - oauth_token_secret `{String}` *Optional;* Dependant upon request step\r\n  - body `{String}` *Optional;* Body information to be sent along with request.\r\n  - type `{String}` *Optional;* Content Request Type\r\n  - parameters `{Object}` *Optional;* Additional headers you wish to pass along with your request.\r\n  - callback `{Function}` *Optional;* Method to be invoked upon result, over-ridden by argument if set.\r\n- callback `{Function}` Method to be invoked upon result, over-rides options callback.\r\n\r\n***\r\n\r\n### Using OAuth2:\r\n\r\n```javascript\r\nvar OAuth2 = require('mashape-oauth').OAuth2;\r\nvar oa = new OAuth2({ /* … options … */ }, callback);\r\n```\r\n\r\n- options `{Object}` OAuth Request Options\r\n  - clientId `{String}` Client Identifier\r\n  - clientSecret `{String}` Client Secret\r\n  - baseUrl `{String}` Base url of OAuth request\r\n  - authorizationUrl `{String}` *Optional;* Authorization endpoint, default is `/oauth/authorize`\r\n  - authorizationMethod `{String}` *Optional;* Authorization Header Method, default is `Bearer`\r\n  - accessTokenUrl `{String}` *Optional;* Access Token Endpoint, default is `/oauth/access_token`\r\n  - accessTokenName `{String}` *Optional;* Access Token Parameter Name, default is `access_token`\r\n  - headers `{Object}` *Optional;* Custom headers we wish to pass along\r\n\r\n***","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}